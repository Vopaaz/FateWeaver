{"version":3,"file":"static/js/21.d74b40e8.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","fateweaver/constants/actions.tsx","fateweaver/constants/board.tsx","fateweaver/workers/computeWorker.ts"],"sourcesContent":["function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nexport { _objectSpread2 as default };","export type MastermindActionId =\r\n  | \"VerticalMove\"\r\n  | \"HorizontalMove\"\r\n  | \"DiagonalMove\"\r\n  | \"GainParanoia\"\r\n  | \"LoseParanoia\"\r\n  | \"ForbidParanoia\"\r\n  | \"ForbidGoodwill\"\r\n  | \"GainIntrigue\"\r\n  | \"GainIntrigue2\"\r\n  | \"UselessLocationCover\";\r\n\r\nexport const MASTERMIND_ACTIONS_I18N: Record<MastermindActionId, string> = {\r\n  GainIntrigue2:  \"密谋 +2\",\r\n  GainIntrigue:   \"密谋 +1\",\r\n  UselessLocationCover: \"地点伪装\",\r\n  DiagonalMove:   \"斜向移动\",\r\n  VerticalMove:   \"↑↓ 移动\",\r\n  HorizontalMove: \"←→ 移动\",\r\n  GainParanoia:   \"不安 +1\",\r\n  LoseParanoia:   \"不安 -1\",\r\n  ForbidParanoia: \"禁止不安\",\r\n  ForbidGoodwill: \"禁止友好\",\r\n};\r\n\r\nexport const ALL_MASTERMIND_ACTIONS: MastermindActionId[] =\r\n  Object.keys(MASTERMIND_ACTIONS_I18N) as MastermindActionId[];\r\n\r\nexport type ProtagonistActionId =\r\n  | \"GainGoodwill\"\r\n  | \"GainGoodwill2\"\r\n  | \"LoseParanoia\"\r\n  | \"ForbidMove\"\r\n  | \"ForbidIntrigue\"\r\n  | \"VerticalMove\"\r\n  | \"GainParanoia\"\r\n  | \"HorizontalMove\";\r\n\r\nexport const PROTAGONIST_ACTIONS_I18N: Record<ProtagonistActionId, string> = {\r\n  ForbidMove:      \"禁止移动\",\r\n  GainGoodwill2:   \"友好 +2\",\r\n  LoseParanoia:    \"不安 -1\",\r\n  ForbidIntrigue:  \"禁止密谋\",\r\n  VerticalMove:    \"↑↓ 移动\",\r\n  HorizontalMove:  \"←→ 移动\",\r\n  GainGoodwill:    \"友好 +1\",\r\n  GainParanoia:    \"不安 +1\",\r\n};\r\n\r\nexport const ALL_PROTAGONIST_ACTIONS: ProtagonistActionId[] =\r\n  Object.keys(PROTAGONIST_ACTIONS_I18N) as ProtagonistActionId[];\r\n","export type LocationId = \"Hospital\" | \"Shrine\" | \"City\" | \"School\";\r\nexport const LOCATIONS_I18N: Record<LocationId, string> = {\r\n  Hospital: \"医院\",\r\n  Shrine: \"神社\",\r\n  City: \"都市\",\r\n  School: \"学校\",\r\n};\r\nexport const ALL_LOCATIONS = Object.keys(LOCATIONS_I18N) as LocationId[];\r\n\r\nexport type CharacterId =\r\n  | \"BoyStudent\"\r\n  | \"GirlStudent\"\r\n  | \"RichMansDaughter\"\r\n  | \"ClassRep\"\r\n  | \"MysteryBoy\"\r\n  | \"ShrineMaiden\"\r\n  | \"Alien\"\r\n  | \"GodlyBeing\"\r\n  | \"PoliceOfficer\"\r\n  | \"OfficeWorker\"\r\n  | \"Informer\"\r\n  | \"PopIdol\"\r\n  | \"Journalist\"\r\n  | \"Boss\"\r\n  | \"Doctor\"\r\n  | \"Patient\"\r\n  | \"Nurse\"\r\n  | \"Henchman\"\r\n  | \"IdentificationOfficer\"\r\n  | \"ArmyMan\";\r\n\r\nexport const CHARACTERS_I18N: Record<CharacterId, string> = {\r\n  BoyStudent: \"男学生\",\r\n  GirlStudent: \"女学生\",\r\n  RichMansDaughter: \"大小姐\",\r\n  ClassRep: \"班长\",\r\n  MysteryBoy: \"局外人\",\r\n  ShrineMaiden: \"巫女\",\r\n  Alien: \"异界人\",\r\n  GodlyBeing: \"神灵\",\r\n  PoliceOfficer: \"刑警\",\r\n  OfficeWorker: \"职员\",\r\n  Informer: \"情报商\",\r\n  PopIdol: \"偶像\",\r\n  Journalist: \"媒体人\",\r\n  Boss: \"大人物\",\r\n  Doctor: \"医生\",\r\n  Patient: \"住院患者\",\r\n  Nurse: \"护士\",\r\n  Henchman: \"手下\",\r\n  IdentificationOfficer: \"鉴别员\",\r\n  ArmyMan: \"军人\",\r\n};\r\nexport const ALL_CHARACTERS = Object.keys(CHARACTERS_I18N) as CharacterId[];\r\n","// src/fateweaver/workers/computeWorker.ts\r\nimport {\r\n  MastermindActionId,\r\n  ALL_MASTERMIND_ACTIONS,\r\n  ProtagonistActionId,\r\n  ALL_PROTAGONIST_ACTIONS,\r\n} from '../constants/actions';\r\nimport { LocationId, CharacterId, ALL_LOCATIONS } from '../constants/board';\r\n\r\nexport type Target = LocationId | CharacterId;\r\n\r\nexport interface MastermindStatEntry {\r\n  count: number;\r\n  sum: number;\r\n  bestValue: number;\r\n  bestProtagPlacement: Record<ProtagonistActionId, Target[]>;\r\n  worstValue: number;\r\n  worstProtagPlacement: Record<ProtagonistActionId, Target[]>;\r\n}\r\n\r\nexport interface ProtagonistStatEntry {\r\n  count: number;\r\n  sum: number;\r\n  bestValue: number;\r\n  bestMasterPlacement: Record<MastermindActionId, Target[]>;\r\n  worstValue: number;\r\n  worstMasterPlacement: Record<MastermindActionId, Target[]>;\r\n}\r\n\r\ninterface LocalStats {\r\n  mastermindStats: Record<MastermindActionId, MastermindStatEntry>;\r\n  protagonistStats: Record<ProtagonistActionId, ProtagonistStatEntry>;\r\n  processedCount: number;\r\n}\r\n\r\ninterface StartMessage {\r\n  type: 'start';\r\n  sliceDistributions: Array<Record<MastermindActionId, number>>;\r\n  protagonistConfig: Record<ProtagonistActionId, number>;\r\n  mastermindScope: Record<MastermindActionId, Target[]>;\r\n  protagonistScope: Record<ProtagonistActionId, Target[]>;\r\n}\r\n\r\ninterface ProgressMessage {\r\n  type: 'progress';\r\n  processed: number;\r\n}\r\n\r\ninterface DoneMessage {\r\n  type: 'done';\r\n  localMastermindStats: Record<MastermindActionId, MastermindStatEntry>;\r\n  localProtagonistStats: Record<ProtagonistActionId, ProtagonistStatEntry>;\r\n}\r\n\r\nlet canceledFlag = false;\r\nlet localStats: LocalStats;\r\n\r\nfunction makeEmptyMastermindStats(): Record<MastermindActionId, MastermindStatEntry> {\r\n  const o = {} as Record<MastermindActionId, MastermindStatEntry>;\r\n  ALL_MASTERMIND_ACTIONS.forEach((aid) => {\r\n    o[aid] = {\r\n      count: 0,\r\n      sum: 0,\r\n      bestValue: -Infinity,\r\n      bestProtagPlacement: {} as Record<ProtagonistActionId, Target[]>,\r\n      worstValue: Infinity,\r\n      worstProtagPlacement: {} as Record<ProtagonistActionId, Target[]>,\r\n    };\r\n  });\r\n  return o;\r\n}\r\n\r\nfunction makeEmptyProtagonistStats(): Record<ProtagonistActionId, ProtagonistStatEntry> {\r\n  const o = {} as Record<ProtagonistActionId, ProtagonistStatEntry>;\r\n  ALL_PROTAGONIST_ACTIONS.forEach((aid) => {\r\n    o[aid] = {\r\n      count: 0,\r\n      sum: 0,\r\n      bestValue: -Infinity,\r\n      bestMasterPlacement: {} as Record<MastermindActionId, Target[]>,\r\n      worstValue: Infinity,\r\n      worstMasterPlacement: {} as Record<MastermindActionId, Target[]>,\r\n    };\r\n  });\r\n  return o;\r\n}\r\n\r\nfunction combinations<T>(arr: T[], k: number): T[][] {\r\n  if (k === 0) return [[]];\r\n  if (arr.length < k) return [];\r\n  const [first, ...rest] = arr;\r\n  const withFirst = combinations(rest, k - 1).map((c) => [first, ...c]);\r\n  const withoutFirst = combinations(rest, k);\r\n  return [...withFirst, ...withoutFirst];\r\n}\r\n\r\nfunction generateDistributions<T extends string>(\r\n  actions: T[],\r\n  config: Record<T, number>,\r\n  sum: number\r\n): Record<T, number>[] {\r\n  const results: Record<T, number>[] = [];\r\n  const current = {} as Record<T, number>;\r\n\r\n  function backtrack(idx: number, rem: number) {\r\n    if (idx === actions.length) {\r\n      if (rem === 0) results.push({ ...current });\r\n      return;\r\n    }\r\n    const action = actions[idx];\r\n    const maxCount = Math.min(config[action], rem);\r\n    for (let count = 0; count <= maxCount; count++) {\r\n      current[action] = count;\r\n      backtrack(idx + 1, rem - count);\r\n    }\r\n  }\r\n\r\n  backtrack(0, sum);\r\n  return results;\r\n}\r\n\r\nclass ComputeEngine {\r\n  async compute(args: {\r\n    mastermindPlacement: Record<MastermindActionId, Target[]>;\r\n    protagonistPlacement: Record<ProtagonistActionId, Target[]>;\r\n  }): Promise<number> {\r\n    return 0;\r\n  }\r\n}\r\n\r\nasync function handleOneMasterDist(\r\n  dist: Record<MastermindActionId, number>,\r\n  protagonistConfig: Record<ProtagonistActionId, number>,\r\n  mastermindScope: Record<MastermindActionId, Target[]>,\r\n  protagonistScope: Record<ProtagonistActionId, Target[]>,\r\n  engine: ComputeEngine\r\n) {\r\n  if (canceledFlag) return;\r\n\r\n  const actions = (Object.keys(dist) as MastermindActionId[]).filter(\r\n    (a) => dist[a] > 0\r\n  );\r\n  const used = new Set<Target>();\r\n  const placementMap = {} as Record<MastermindActionId, Target[]>;\r\n\r\n  const recurseMaster = async (idx: number) => {\r\n    if (canceledFlag) return;\r\n    if (idx === actions.length) {\r\n      const coveredLocations = new Set<LocationId>();\r\n      actions.forEach((a) => {\r\n        (placementMap[a] || []).forEach((t) => {\r\n          if (ALL_LOCATIONS.includes(t as LocationId)) {\r\n            coveredLocations.add(t as LocationId);\r\n          }\r\n        });\r\n      });\r\n\r\n      const tempProtoScope: Record<ProtagonistActionId, Target[]> = {\r\n        ...protagonistScope,\r\n      };\r\n      if (protagonistScope.ForbidIntrigue) {\r\n        const filtered = protagonistScope.ForbidIntrigue.filter((t) => {\r\n          const isLoc = ALL_LOCATIONS.includes(t as LocationId);\r\n          if (isLoc && !coveredLocations.has(t as LocationId)) {\r\n            return false;\r\n          }\r\n          return true;\r\n        });\r\n        tempProtoScope.ForbidIntrigue = filtered;\r\n      }\r\n\r\n      // **在此处分割循环并禁用 ESLint no-loop-func**\r\n      /* eslint-disable no-loop-func */\r\n      const protComps = generateDistributions(\r\n        ALL_PROTAGONIST_ACTIONS,\r\n        protagonistConfig,\r\n        3\r\n      );\r\n      for (const pDist of protComps) {\r\n        if (canceledFlag) return;\r\n\r\n        const pActions = (Object.keys(pDist) as ProtagonistActionId[]).filter(\r\n          (a) => pDist[a] > 0\r\n        );\r\n        const pUsed = new Set<Target>();\r\n        const pPlacementMap = {} as Record<ProtagonistActionId, Target[]>;\r\n\r\n        const recurseProto = async (jdx: number) => {\r\n          if (canceledFlag) return;\r\n          if (jdx === pActions.length) {\r\n\r\n            // console.log(\"mastermind\", JSON.stringify(placementMap))\r\n            // console.log(\"protagonist\", JSON.stringify(pPlacementMap))\r\n\r\n            const utilValue = await engine.compute({\r\n              mastermindPlacement: placementMap,\r\n              protagonistPlacement: pPlacementMap,\r\n            });\r\n\r\n            actions.forEach((ma) => {\r\n              const stat = localStats.mastermindStats[ma];\r\n              stat.count += 1;\r\n              stat.sum += utilValue;\r\n              if (utilValue > stat.bestValue) {\r\n                stat.bestValue = utilValue;\r\n                stat.bestProtagPlacement = JSON.parse(\r\n                  JSON.stringify(pPlacementMap)\r\n                );\r\n              }\r\n              if (utilValue < stat.worstValue) {\r\n                stat.worstValue = utilValue;\r\n                stat.worstProtagPlacement = JSON.parse(\r\n                  JSON.stringify(pPlacementMap)\r\n                );\r\n              }\r\n            });\r\n\r\n            pActions.forEach((pa) => {\r\n              const stat2 = localStats.protagonistStats[pa];\r\n              stat2.count += 1;\r\n              stat2.sum += utilValue;\r\n              if (utilValue > stat2.bestValue) {\r\n                stat2.bestValue = utilValue;\r\n                stat2.bestMasterPlacement = JSON.parse(\r\n                  JSON.stringify(placementMap)\r\n                );\r\n              }\r\n              if (utilValue < stat2.worstValue) {\r\n                stat2.worstValue = utilValue;\r\n                stat2.worstMasterPlacement = JSON.parse(\r\n                  JSON.stringify(placementMap)\r\n                );\r\n              }\r\n            });\r\n\r\n            localStats.processedCount += 1;\r\n            if (localStats.processedCount % 5000 === 0) {\r\n              const msg: ProgressMessage = {\r\n                type: 'progress',\r\n                processed: 5000,\r\n              };\r\n              globalThis.postMessage(msg);\r\n            }\r\n            return;\r\n          }\r\n\r\n          const pa = pActions[jdx];\r\n          const need = pDist[pa];\r\n          const avail = (tempProtoScope[pa] || []).filter((t) => !pUsed.has(t));\r\n          const combos = combinations(avail, need);\r\n          for (const combo of combos) {\r\n            if (canceledFlag) return;\r\n            combo.forEach((t) => pUsed.add(t));\r\n            pPlacementMap[pa] = combo;\r\n            await Promise.resolve();\r\n            await recurseProto(jdx + 1);\r\n            combo.forEach((t) => pUsed.delete(t));\r\n          }\r\n        };\r\n\r\n        await recurseProto(0);\r\n      }\r\n      /* eslint-enable no-loop-func */\r\n      // **循环结束**\r\n      return;\r\n    }\r\n\r\n    const a = actions[idx];\r\n    const need = dist[a];\r\n    const avail = (mastermindScope[a] || []).filter((t) => !used.has(t));\r\n    const combos = combinations(avail, need);\r\n    for (const combo of combos) {\r\n      if (canceledFlag) return;\r\n      combo.forEach((t) => used.add(t));\r\n      placementMap[a] = combo;\r\n      await Promise.resolve();\r\n      await recurseMaster(idx + 1);\r\n      combo.forEach((t) => used.delete(t));\r\n    }\r\n  };\r\n\r\n  await recurseMaster(0);\r\n}\r\n\r\nasync function runWorker(\r\n  sliceDistributions: Array<Record<MastermindActionId, number>>,\r\n  protagonistConfig: Record<ProtagonistActionId, number>,\r\n  mastermindScope: Record<MastermindActionId, Target[]>,\r\n  protagonistScope: Record<ProtagonistActionId, Target[]>\r\n) {\r\n  localStats = {\r\n    mastermindStats: makeEmptyMastermindStats(),\r\n    protagonistStats: makeEmptyProtagonistStats(),\r\n    processedCount: 0,\r\n  };\r\n\r\n  const engine = new ComputeEngine();\r\n\r\n  for (const dist of sliceDistributions) {\r\n    if (canceledFlag) break;\r\n\r\n    await handleOneMasterDist(\r\n      dist,\r\n      protagonistConfig,\r\n      mastermindScope,\r\n      protagonistScope,\r\n      engine\r\n    );\r\n  }\r\n\r\n  const remainder = localStats.processedCount % 5000;\r\n  if (remainder > 0) {\r\n    const msg: ProgressMessage = {\r\n      type: 'progress',\r\n      processed: remainder,\r\n    };\r\n    globalThis.postMessage(msg);\r\n  }\r\n\r\n  const doneMsg: DoneMessage = {\r\n    type: 'done',\r\n    localMastermindStats: localStats.mastermindStats,\r\n    localProtagonistStats: localStats.protagonistStats,\r\n  };\r\n  globalThis.postMessage(doneMsg);\r\n  globalThis.close();\r\n}\r\n\r\nglobalThis.addEventListener('message', (ev: MessageEvent) => {\r\n  const data = ev.data as StartMessage | { type: 'cancel' };\r\n  if (data.type === 'start') {\r\n    canceledFlag = false;\r\n    runWorker(\r\n      data.sliceDistributions,\r\n      data.protagonistConfig,\r\n      data.mastermindScope,\r\n      data.protagonistScope\r\n    );\r\n  } else if (data.type === 'cancel') {\r\n    canceledFlag = true;\r\n  }\r\n});\r\n"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","toPropertyKey","t","i","r","e","toPrimitive","call","TypeError","String","Number","_defineProperty","Object","defineProperty","value","enumerable","configurable","writable","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","ALL_MASTERMIND_ACTIONS","GainIntrigue2","GainIntrigue","UselessLocationCover","DiagonalMove","VerticalMove","HorizontalMove","GainParanoia","LoseParanoia","ForbidParanoia","ForbidGoodwill","ALL_PROTAGONIST_ACTIONS","ForbidMove","GainGoodwill2","ForbidIntrigue","GainGoodwill","ALL_LOCATIONS","Hospital","Shrine","City","School","BoyStudent","GirlStudent","RichMansDaughter","ClassRep","MysteryBoy","ShrineMaiden","Alien","GodlyBeing","PoliceOfficer","OfficeWorker","Informer","PopIdol","Journalist","Boss","Doctor","Patient","Nurse","Henchman","IdentificationOfficer","ArmyMan","localStats","canceledFlag","makeEmptyMastermindStats","aid","count","sum","bestValue","Infinity","bestProtagPlacement","worstValue","worstProtagPlacement","makeEmptyProtagonistStats","bestMasterPlacement","worstMasterPlacement","combinations","arr","k","first","rest","map","c","ComputeEngine","compute","args","async","handleOneMasterDist","dist","protagonistConfig","mastermindScope","protagonistScope","engine","actions","a","used","Set","placementMap","recurseMaster","idx","coveredLocations","includes","add","tempProtoScope","_objectSpread","filtered","has","protComps","config","results","current","backtrack","rem","action","maxCount","Math","min","generateDistributions","pDist","pActions","pUsed","pPlacementMap","recurseProto","jdx","utilValue","mastermindPlacement","protagonistPlacement","ma","stat","mastermindStats","JSON","parse","stringify","pa","stat2","protagonistStats","processedCount","msg","type","processed","globalThis","postMessage","need","combos","combo","Promise","resolve","delete","addEventListener","ev","data","sliceDistributions","remainder","doneMsg","localMastermindStats","localProtagonistStats","close","runWorker"],"sourceRoot":""}