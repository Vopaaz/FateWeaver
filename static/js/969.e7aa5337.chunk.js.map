{"version":3,"file":"static/js/969.e7aa5337.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","fateweaver/constants/actions.tsx","fateweaver/constants/board.tsx","fateweaver/utils/utilityEvaluator.ts","fateweaver/constants/characters.tsx","fateweaver/workers/computeEngine.ts","fateweaver/utils/placementKey.ts","fateweaver/workers/computeWorker.ts"],"sourcesContent":["function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nexport { _objectSpread2 as default };","export type MastermindActionId =\r\n  | \"VerticalMove\"\r\n  | \"HorizontalMove\"\r\n  | \"DiagonalMove\"\r\n  | \"GainParanoia\"\r\n  | \"LoseParanoia\"\r\n  | \"ForbidParanoia\"\r\n  | \"ForbidGoodwill\"\r\n  | \"GainIntrigue\"\r\n  | \"GainIntrigue2\"\r\n  | \"UselessLocationCover\";\r\n\r\nexport const MASTERMIND_ACTIONS_I18N: Record<MastermindActionId, string> = {\r\n  GainIntrigue2:  \"密谋 +2\",\r\n  GainIntrigue:   \"密谋 +1\",\r\n  UselessLocationCover: \"地点伪装\",\r\n  DiagonalMove:   \"斜向移动\",\r\n  VerticalMove:   \"↑↓ 移动\",\r\n  HorizontalMove: \"←→ 移动\",\r\n  GainParanoia:   \"不安 +1\",\r\n  LoseParanoia:   \"不安 -1\",\r\n  ForbidParanoia: \"禁止不安\",\r\n  ForbidGoodwill: \"禁止友好\",\r\n};\r\n\r\nexport const ALL_MASTERMIND_ACTIONS: MastermindActionId[] =\r\n  Object.keys(MASTERMIND_ACTIONS_I18N) as MastermindActionId[];\r\n\r\nexport type ProtagonistActionId =\r\n  | \"GainGoodwill\"\r\n  | \"GainGoodwill2\"\r\n  | \"LoseParanoia\"\r\n  | \"ForbidMove\"\r\n  | \"ForbidIntrigue\"\r\n  | \"VerticalMove\"\r\n  | \"GainParanoia\"\r\n  | \"HorizontalMove\";\r\n\r\nexport const PROTAGONIST_ACTIONS_I18N: Record<ProtagonistActionId, string> = {\r\n  ForbidMove:      \"禁止移动\",\r\n  GainGoodwill2:   \"友好 +2\",\r\n  LoseParanoia:    \"不安 -1\",\r\n  ForbidIntrigue:  \"禁止密谋\",\r\n  VerticalMove:    \"↑↓ 移动\",\r\n  HorizontalMove:  \"←→ 移动\",\r\n  GainGoodwill:    \"友好 +1\",\r\n  GainParanoia:    \"不安 +1\",\r\n};\r\n\r\nexport const ALL_PROTAGONIST_ACTIONS: ProtagonistActionId[] =\r\n  Object.keys(PROTAGONIST_ACTIONS_I18N) as ProtagonistActionId[];\r\n","export type LocationId = \"Hospital\" | \"Shrine\" | \"City\" | \"School\";\r\nexport const LOCATIONS_I18N: Record<LocationId, string> = {\r\n  Hospital: \"医院\",\r\n  Shrine: \"神社\",\r\n  City: \"都市\",\r\n  School: \"学校\",\r\n};\r\nexport const ALL_LOCATIONS = Object.keys(LOCATIONS_I18N) as LocationId[];\r\n\r\nexport type CharacterId =\r\n  | \"BoyStudent\"\r\n  | \"GirlStudent\"\r\n  | \"RichMansDaughter\"\r\n  | \"ClassRep\"\r\n  | \"MysteryBoy\"\r\n  | \"ShrineMaiden\"\r\n  | \"Alien\"\r\n  | \"GodlyBeing\"\r\n  | \"PoliceOfficer\"\r\n  | \"OfficeWorker\"\r\n  | \"Informer\"\r\n  | \"PopIdol\"\r\n  | \"Journalist\"\r\n  | \"Boss\"\r\n  | \"Doctor\"\r\n  | \"Patient\"\r\n  | \"Nurse\"\r\n  | \"Henchman\"\r\n  | \"IdentificationOfficer\"\r\n  | \"ArmyMan\"\r\n  | \"UnlockedPatient\";\r\n\r\nexport const CHARACTERS_I18N: Record<CharacterId, string> = {\r\n  BoyStudent: \"男学生\",\r\n  GirlStudent: \"女学生\",\r\n  RichMansDaughter: \"大小姐\",\r\n  ClassRep: \"班长\",\r\n  MysteryBoy: \"局外人\",\r\n  ShrineMaiden: \"巫女\",\r\n  Alien: \"异界人\",\r\n  GodlyBeing: \"神灵\",\r\n  PoliceOfficer: \"刑警\",\r\n  OfficeWorker: \"职员\",\r\n  Informer: \"情报商\",\r\n  PopIdol: \"偶像\",\r\n  Journalist: \"媒体人\",\r\n  Boss: \"大人物\",\r\n  Doctor: \"医生\",\r\n  Patient: \"住院患者\",\r\n  Nurse: \"护士\",\r\n  Henchman: \"手下\",\r\n  IdentificationOfficer: \"鉴别员\",\r\n  ArmyMan: \"军人\",\r\n  UnlockedPatient: \"已康复患者\"\r\n};\r\nexport const ALL_CHARACTERS = Object.keys(CHARACTERS_I18N) as CharacterId[];\r\n","// src/fateweaver/utils/utilityEvaluators.ts\r\n\r\nimport { BoardState } from \"../workers/computeEngine\";\r\nimport { CharacterId, LocationId, ALL_LOCATIONS } from \"../constants/board\";\r\n\r\n/**\r\n * 返回角色当前所在地点；如果不在任何地点则返回 undefined\r\n */\r\nexport function findCharacterLocation(\r\n  charId: CharacterId,\r\n  boardState: BoardState\r\n): LocationId | undefined {\r\n  for (const loc of ALL_LOCATIONS) {\r\n    if (boardState.locations[loc].characters.includes(charId)) {\r\n      return loc;\r\n    }\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * 基本规则：? 的不安大于 ?\r\n * params[0]: CharacterId\r\n * params[1]: number\r\n */\r\nexport function evalParanoiaGreaterThan(\r\n  params: any[],\r\n  boardState: BoardState\r\n): boolean {\r\n  const charId = params[0] as CharacterId;\r\n  const threshold = params[1] as number;\r\n  return boardState.characterStats[charId].paranoia > threshold;\r\n}\r\n\r\n/**\r\n * 基本规则：? 的密谋大于 ?\r\n * params[0]: Target (CharacterId 或 LocationId)\r\n * params[1]: number\r\n */\r\nexport function evalIntrigueGreaterThan(\r\n  params: any[],\r\n  boardState: BoardState\r\n): boolean {\r\n  const target = params[0] as CharacterId | LocationId;\r\n  const threshold = params[1] as number;\r\n  if (ALL_LOCATIONS.includes(target as LocationId)) {\r\n    return boardState.locations[target as LocationId].intrigue > threshold;\r\n  } else {\r\n    return (\r\n      boardState.characterStats[target as CharacterId].intrigue > threshold\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * 基本规则：? 的友好大于 ?\r\n * params[0]: CharacterId\r\n * params[1]: number\r\n */\r\nexport function evalGoodwillGreaterThan(\r\n  params: any[],\r\n  boardState: BoardState\r\n): boolean {\r\n  const charId = params[0] as CharacterId;\r\n  const threshold = params[1] as number;\r\n  return boardState.characterStats[charId].goodwill > threshold;\r\n}\r\n\r\n/**\r\n * 基本规则：? 位于 ?\r\n * params[0]: CharacterId\r\n * params[1]: LocationId\r\n */\r\nexport function evalSomeoneInSomewhere(\r\n  params: any[],\r\n  boardState: BoardState\r\n): boolean {\r\n  const charId = params[0] as CharacterId;\r\n  const location = params[1] as LocationId;\r\n  const loc = findCharacterLocation(charId, boardState);\r\n  return loc === location;\r\n}\r\n\r\n/**\r\n * 基本规则：? 与 ? 处于同一地点\r\n * params[0]: CharacterId\r\n * params[1]: CharacterId\r\n */\r\nexport function evalSomeoneInSameLocationAs(\r\n  params: any[],\r\n  boardState: BoardState\r\n): boolean {\r\n  const charA = params[0] as CharacterId;\r\n  const charB = params[1] as CharacterId;\r\n  const locA = findCharacterLocation(charA, boardState);\r\n  if (!locA) return false;\r\n  const locB = findCharacterLocation(charB, boardState);\r\n  return locA === locB;\r\n}\r\n\r\n/**\r\n * 基本规则：与 ? 处于同一地点的人数大于 ?\r\n * params[0]: CharacterId\r\n * params[1]: number\r\n *\r\n * 注：计算同地点的人数时，不包括自身，且只统计存活角色\r\n */\r\nexport function evalNumberShareLocationGreaterThan(\r\n  params: any[],\r\n  boardState: BoardState\r\n): boolean {\r\n  const charId = params[0] as CharacterId;\r\n  const threshold = params[1] as number;\r\n  const loc = findCharacterLocation(charId, boardState);\r\n  if (!loc) return false;\r\n  // 只统计存活的角色\r\n  const aliveChars = boardState.locations[loc].characters.filter(\r\n    (id) => boardState.characterStats[id].alive\r\n  );\r\n  // 排除自身\r\n  const countAtLoc = aliveChars.filter((id) => id !== charId).length;\r\n  return countAtLoc > threshold;\r\n}\r\n\r\n/**\r\n * 基本规则：与 ? 处于同一地点的人数等于 ?\r\n * params[0]: CharacterId\r\n * params[1]: number\r\n *\r\n * 注：计算同地点的人数时，不包括自身，且只统计存活角色\r\n */\r\nexport function evalNumberShareLocationEquals(\r\n  params: any[],\r\n  boardState: BoardState\r\n): boolean {\r\n  const charId = params[0] as CharacterId;\r\n  const targetNumber = params[1] as number;\r\n  const loc = findCharacterLocation(charId, boardState);\r\n  if (!loc) return false;\r\n  // 只统计存活的角色\r\n  const aliveChars = boardState.locations[loc].characters.filter(\r\n    (id) => boardState.characterStats[id].alive\r\n  );\r\n  // 排除自身\r\n  const countAtLoc = aliveChars.filter((id) => id !== charId).length;\r\n  return countAtLoc === targetNumber;\r\n}\r\n\r\n/**\r\n * 逻辑组合规则：and, or, not\r\n * params: 包含子规则的 id 字符串，暂由 computeEngine 内部处理\r\n */\r\nexport const EVALUATORS: Record<\r\n  string,\r\n  (\r\n    params: any[],\r\n    boardState: BoardState,\r\n    evalRule: (id: string) => boolean\r\n  ) => boolean\r\n> = {\r\n  paranoiaGreaterThan: (params, boardState) =>\r\n    evalParanoiaGreaterThan(params, boardState),\r\n  intrigueGreaterThan: (params, boardState) =>\r\n    evalIntrigueGreaterThan(params, boardState),\r\n  goodwillGreaterThan: (params, boardState) =>\r\n    evalGoodwillGreaterThan(params, boardState),\r\n  someoneInSomewhere: (params, boardState) =>\r\n    evalSomeoneInSomewhere(params, boardState),\r\n  someoneInSameLocationAs: (params, boardState) =>\r\n    evalSomeoneInSameLocationAs(params, boardState),\r\n  numberShareLocationGreaterThan: (params, boardState) =>\r\n    evalNumberShareLocationGreaterThan(params, boardState),\r\n  numberShareLocationEquals: (params, boardState) =>\r\n    evalNumberShareLocationEquals(params, boardState),\r\n  and: (params, boardState, evalRule) => {\r\n    const sub1 = params[0] as string;\r\n    const sub2 = params[1] as string;\r\n    return evalRule(sub1) && evalRule(sub2);\r\n  },\r\n  or: (params, boardState, evalRule) => {\r\n    const sub1 = params[0] as string;\r\n    const sub2 = params[1] as string;\r\n    return evalRule(sub1) || evalRule(sub2);\r\n  },\r\n  not: (params, boardState, evalRule) => {\r\n    const sub = params[0] as string;\r\n    return !evalRule(sub);\r\n  },\r\n};\r\n","// src/constants/forbiddenAreas.ts\r\n\r\nimport { CharacterId, LocationId } from './board';\r\n\r\n/**\r\n * 禁行区域定义：key 为 CharacterId，value 为该角色不可进入的 LocationId 列表。\r\n * 如果角色尝试移入该列表中的地点，则移动无效，角色留在原地。\r\n */\r\nexport const FORBIDDEN_AREAS: Record<CharacterId, LocationId[]> = {\r\n  BoyStudent: [],\r\n  GirlStudent: [],\r\n  RichMansDaughter: [],\r\n  ClassRep: [],\r\n  MysteryBoy: [],\r\n  ShrineMaiden: [\"City\"],\r\n  Alien: [\"Hospital\"],\r\n  GodlyBeing: [],\r\n  PoliceOfficer: [],\r\n  OfficeWorker: [\"School\"],\r\n  Informer: [],\r\n  PopIdol: [],\r\n  Journalist: [],\r\n  Boss: [],\r\n  Doctor: [],\r\n  Patient: [\"City\", \"School\", \"Shrine\"],\r\n  Nurse: [],\r\n  Henchman: [],\r\n  IdentificationOfficer: [],\r\n  ArmyMan: [],\r\n  UnlockedPatient: []\r\n};\r\n","// src/fateweaver/workers/computeEngine.ts\r\n\r\nimport { MastermindActionId, ProtagonistActionId } from \"../constants/actions\";\r\nimport { Target } from \"./computeWorker\";\r\nimport { LocationId, CharacterId, ALL_LOCATIONS } from \"../constants/board\";\r\nimport { UtilityItem, ValueDefinition } from \"../store/utilitySlice\";\r\nimport { EVALUATORS } from \"../utils/utilityEvaluator\";\r\nimport { FORBIDDEN_AREAS } from \"../constants/characters\";\r\n\r\n/**\r\n * ComputeEngine 现在接收：\r\n * - mastermindPlacement, protagonistPlacement：行为枚举实例\r\n * - boardState：当前 board 全量状态，包括 location 上的角色列表与 intrigue 值，和每个角色的 stats（paranoia, goodwill, intrigue, alive）\r\n * - utilities, values：完整的效用定义列表\r\n */\r\nexport interface BoardState {\r\n  locations: Record<\r\n    LocationId,\r\n    { characters: CharacterId[]; intrigue: number }\r\n  >;\r\n  characterStats: Record<\r\n    CharacterId,\r\n    { paranoia: number; goodwill: number; intrigue: number; alive: boolean }\r\n  >;\r\n}\r\n\r\nexport class ComputeEngine {\r\n  async compute(args: {\r\n    mastermindPlacement: Record<MastermindActionId, Target[]>;\r\n    protagonistPlacement: Record<ProtagonistActionId, Target[]>;\r\n    boardState: BoardState;\r\n    utilities: UtilityItem[];\r\n    values: ValueDefinition[];\r\n  }): Promise<number> {\r\n    const newBoard = await this.computeNewBoardState(\r\n      args.mastermindPlacement,\r\n      args.protagonistPlacement,\r\n      args.boardState\r\n    );\r\n    const utility = await this.computeUtilityValue(\r\n      newBoard,\r\n      args.utilities,\r\n      args.values\r\n    );\r\n    return utility;\r\n  }\r\n\r\n  async computeNewBoardState(\r\n    mastermindPlacement: Record<MastermindActionId, Target[]>,\r\n    protagonistPlacement: Record<ProtagonistActionId, Target[]>,\r\n    boardState: BoardState\r\n  ): Promise<BoardState> {\r\n    const newBoard: BoardState = {\r\n      locations: {} as Record<\r\n        LocationId,\r\n        { characters: CharacterId[]; intrigue: number }\r\n      >,\r\n      characterStats: {} as Record<\r\n        CharacterId,\r\n        { paranoia: number; goodwill: number; intrigue: number; alive: boolean }\r\n      >,\r\n    };\r\n    for (const loc of ALL_LOCATIONS) {\r\n      newBoard.locations[loc] = {\r\n        characters: [...boardState.locations[loc].characters],\r\n        intrigue: boardState.locations[loc].intrigue,\r\n      };\r\n    }\r\n    for (const cid in boardState.characterStats) {\r\n      const stats = boardState.characterStats[cid as CharacterId];\r\n      newBoard.characterStats[cid as CharacterId] = {\r\n        paranoia: stats.paranoia,\r\n        goodwill: stats.goodwill,\r\n        intrigue: stats.intrigue,\r\n        alive: stats.alive,\r\n      };\r\n    }\r\n\r\n    type ActionInfo = { actionId: string; isMaster: boolean };\r\n    const targetMap: Record<string, ActionInfo[]> = {};\r\n\r\n    for (const actionId in mastermindPlacement) {\r\n      const arr = mastermindPlacement[actionId as MastermindActionId];\r\n      for (const t of arr) {\r\n        const key = String(t);\r\n        if (!targetMap[key]) targetMap[key] = [];\r\n        targetMap[key].push({ actionId, isMaster: true });\r\n      }\r\n    }\r\n    for (const actionId in protagonistPlacement) {\r\n      const arr = protagonistPlacement[actionId as ProtagonistActionId];\r\n      for (const t of arr) {\r\n        const key = String(t);\r\n        if (!targetMap[key]) targetMap[key] = [];\r\n        targetMap[key].push({ actionId, isMaster: false });\r\n      }\r\n    }\r\n\r\n    const findLocation = (charId: CharacterId): LocationId | undefined => {\r\n      for (const loc of ALL_LOCATIONS) {\r\n        if (newBoard.locations[loc].characters.includes(charId)) {\r\n          return loc;\r\n        }\r\n      }\r\n      return undefined;\r\n    };\r\n\r\n    const attemptMove = (\r\n      charId: CharacterId,\r\n      dest: LocationId,\r\n      board: BoardState\r\n    ) => {\r\n      const forbidden = FORBIDDEN_AREAS[charId] || [];\r\n      if (forbidden.includes(dest)) {\r\n        return;\r\n      }\r\n      const src = findLocation(charId);\r\n      if (src && src !== dest) {\r\n        board.locations[src].characters = board.locations[\r\n          src\r\n        ].characters.filter((c) => c !== charId);\r\n        board.locations[dest].characters.push(charId);\r\n      }\r\n    };\r\n\r\n    for (const targetKey in targetMap) {\r\n      const actions = targetMap[targetKey];\r\n      if (actions.length === 1) {\r\n        const { actionId } = actions[0];\r\n        const t = targetKey as LocationId | CharacterId;\r\n        switch (actionId) {\r\n          case \"GainIntrigue2\": {\r\n            if (ALL_LOCATIONS.includes(t as LocationId)) {\r\n              newBoard.locations[t as LocationId].intrigue += 2;\r\n            } else {\r\n              newBoard.characterStats[t as CharacterId].intrigue += 2;\r\n            }\r\n            break;\r\n          }\r\n          case \"GainIntrigue\": {\r\n            if (ALL_LOCATIONS.includes(t as LocationId)) {\r\n              newBoard.locations[t as LocationId].intrigue += 1;\r\n            } else {\r\n              newBoard.characterStats[t as CharacterId].intrigue += 1;\r\n            }\r\n            break;\r\n          }\r\n          case \"UselessLocationCover\": {\r\n            break;\r\n          }\r\n          case \"DiagonalMove\": {\r\n            if (!ALL_LOCATIONS.includes(t as LocationId)) {\r\n              const charId = t as CharacterId;\r\n              const loc = findLocation(charId);\r\n              if (!loc) break;\r\n              let dest: LocationId | undefined;\r\n              if (loc === \"Hospital\") dest = \"School\";\r\n              else if (loc === \"School\") dest = \"Hospital\";\r\n              else if (loc === \"City\") dest = \"Shrine\";\r\n              else if (loc === \"Shrine\") dest = \"City\";\r\n              if (dest) attemptMove(charId, dest, newBoard);\r\n            }\r\n            break;\r\n          }\r\n          case \"VerticalMove\": {\r\n            if (!ALL_LOCATIONS.includes(t as LocationId)) {\r\n              const charId = t as CharacterId;\r\n              const loc = findLocation(charId);\r\n              if (!loc) break;\r\n              let dest: LocationId | undefined;\r\n              if (loc === \"Hospital\") dest = \"City\";\r\n              else if (loc === \"City\") dest = \"Hospital\";\r\n              else if (loc === \"Shrine\") dest = \"School\";\r\n              else if (loc === \"School\") dest = \"Shrine\";\r\n              if (dest) attemptMove(charId, dest, newBoard);\r\n            }\r\n            break;\r\n          }\r\n          case \"HorizontalMove\": {\r\n            if (!ALL_LOCATIONS.includes(t as LocationId)) {\r\n              const charId = t as CharacterId;\r\n              const loc = findLocation(charId);\r\n              if (!loc) break;\r\n              let dest: LocationId | undefined;\r\n              if (loc === \"Hospital\") dest = \"Shrine\";\r\n              else if (loc === \"Shrine\") dest = \"Hospital\";\r\n              else if (loc === \"City\") dest = \"School\";\r\n              else if (loc === \"School\") dest = \"City\";\r\n              if (dest) attemptMove(charId, dest, newBoard);\r\n            }\r\n            break;\r\n          }\r\n          case \"GainParanoia\": {\r\n            if (ALL_LOCATIONS.includes(t as LocationId)) break;\r\n            newBoard.characterStats[t as CharacterId].paranoia += 1;\r\n            break;\r\n          }\r\n          case \"LoseParanoia\": {\r\n            if (ALL_LOCATIONS.includes(t as LocationId)) break;\r\n            const cur = newBoard.characterStats[t as CharacterId].paranoia;\r\n            newBoard.characterStats[t as CharacterId].paranoia = Math.max(\r\n              0,\r\n              cur - 1\r\n            );\r\n            break;\r\n          }\r\n          case \"ForbidParanoia\":\r\n          case \"ForbidGoodwill\":\r\n          case \"ForbidMove\": {\r\n            break;\r\n          }\r\n          case \"GainGoodwill2\": {\r\n            if (ALL_LOCATIONS.includes(t as LocationId)) break;\r\n            newBoard.characterStats[t as CharacterId].goodwill += 2;\r\n            break;\r\n          }\r\n          case \"GainGoodwill\": {\r\n            if (ALL_LOCATIONS.includes(t as LocationId)) break;\r\n            newBoard.characterStats[t as CharacterId].goodwill += 1;\r\n            break;\r\n          }\r\n          default: {\r\n            break;\r\n          }\r\n        }\r\n      } else if (actions.length === 2) {\r\n        const [a1, a2] = actions;\r\n        const actSet = new Set([a1.actionId, a2.actionId]);\r\n        const t = targetKey as LocationId | CharacterId;\r\n\r\n        if (\r\n          actSet.has(\"ForbidIntrigue\") &&\r\n          (actSet.has(\"GainIntrigue\") || actSet.has(\"GainIntrigue2\"))\r\n        ) {\r\n          continue;\r\n        }\r\n        if (\r\n          actSet.has(\"ForbidMove\") &&\r\n          (actSet.has(\"DiagonalMove\") ||\r\n            actSet.has(\"VerticalMove\") ||\r\n            actSet.has(\"HorizontalMove\"))\r\n        ) {\r\n          continue;\r\n        }\r\n        if (\r\n          actSet.has(\"VerticalMove\") &&\r\n          actSet.has(\"HorizontalMove\")\r\n        ) {\r\n          if (!ALL_LOCATIONS.includes(t as LocationId)) {\r\n            const charId = t as CharacterId;\r\n            const loc = findLocation(charId);\r\n            if (!loc) continue;\r\n            let dest: LocationId | undefined;\r\n            if (loc === \"Hospital\") dest = \"School\";\r\n            else if (loc === \"School\") dest = \"Hospital\";\r\n            else if (loc === \"City\") dest = \"Shrine\";\r\n            else if (loc === \"Shrine\") dest = \"City\";\r\n            if (dest) attemptMove(charId, dest, newBoard);\r\n            continue;\r\n          }\r\n        }\r\n        if (actSet.has(\"GainParanoia\") && actSet.has(\"LoseParanoia\")) {\r\n          continue;\r\n        }\r\n        if (\r\n          actSet.has(\"ForbidParanoia\") &&\r\n          (actSet.has(\"GainParanoia\") || actSet.has(\"LoseParanoia\"))\r\n        ) {\r\n          continue;\r\n        }\r\n        if (\r\n          actSet.has(\"ForbidGoodwill\") &&\r\n          (actSet.has(\"GainGoodwill\") || actSet.has(\"GainGoodwill2\"))\r\n        ) {\r\n          continue;\r\n        }\r\n        for (const info of actions) {\r\n          const actionId = info.actionId;\r\n          const tval = targetKey as LocationId | CharacterId;\r\n          switch (actionId) {\r\n            case \"GainIntrigue2\": {\r\n              if (ALL_LOCATIONS.includes(tval as LocationId)) {\r\n                newBoard.locations[tval as LocationId].intrigue += 2;\r\n              } else {\r\n                newBoard.characterStats[tval as CharacterId].intrigue += 2;\r\n              }\r\n              break;\r\n            }\r\n            case \"GainIntrigue\": {\r\n              if (ALL_LOCATIONS.includes(tval as LocationId)) {\r\n                newBoard.locations[tval as LocationId].intrigue += 1;\r\n              } else {\r\n                newBoard.characterStats[tval as CharacterId].intrigue += 1;\r\n              }\r\n              break;\r\n            }\r\n            case \"UselessLocationCover\": {\r\n              break;\r\n            }\r\n            case \"DiagonalMove\": {\r\n              if (!ALL_LOCATIONS.includes(tval as LocationId)) {\r\n                const charId = tval as CharacterId;\r\n                const loc = findLocation(charId);\r\n                if (!loc) break;\r\n                let dest: LocationId | undefined;\r\n                if (loc === \"Hospital\") dest = \"School\";\r\n                else if (loc === \"School\") dest = \"Hospital\";\r\n                else if (loc === \"City\") dest = \"Shrine\";\r\n                else if (loc === \"Shrine\") dest = \"City\";\r\n                if (dest) attemptMove(charId, dest, newBoard);\r\n              }\r\n              break;\r\n            }\r\n            case \"VerticalMove\": {\r\n              if (!ALL_LOCATIONS.includes(tval as LocationId)) {\r\n                const charId = tval as CharacterId;\r\n                const loc = findLocation(charId);\r\n                if (!loc) break;\r\n                let dest: LocationId | undefined;\r\n                if (loc === \"Hospital\") dest = \"City\";\r\n                else if (loc === \"City\") dest = \"Hospital\";\r\n                else if (loc === \"Shrine\") dest = \"School\";\r\n                else if (loc === \"School\") dest = \"Shrine\";\r\n                if (dest) attemptMove(charId, dest, newBoard);\r\n              }\r\n              break;\r\n            }\r\n            case \"HorizontalMove\": {\r\n              if (!ALL_LOCATIONS.includes(tval as LocationId)) {\r\n                const charId = tval as CharacterId;\r\n                const loc = findLocation(charId);\r\n                if (!loc) break;\r\n                let dest: LocationId | undefined;\r\n                if (loc === \"Hospital\") dest = \"Shrine\";\r\n                else if (loc === \"Shrine\") dest = \"Hospital\";\r\n                else if (loc === \"City\") dest = \"School\";\r\n                else if (loc === \"School\") dest = \"City\";\r\n                if (dest) attemptMove(charId, dest, newBoard);\r\n              }\r\n              break;\r\n            }\r\n            case \"GainParanoia\": {\r\n              if (ALL_LOCATIONS.includes(tval as LocationId)) break;\r\n              newBoard.characterStats[tval as CharacterId].paranoia += 1;\r\n              break;\r\n            }\r\n            case \"LoseParanoia\": {\r\n              if (ALL_LOCATIONS.includes(tval as LocationId)) break;\r\n              const cur = newBoard.characterStats[tval as CharacterId].paranoia;\r\n              newBoard.characterStats[tval as CharacterId].paranoia = Math.max(\r\n                0,\r\n                cur - 1\r\n              );\r\n              break;\r\n            }\r\n            case \"ForbidParanoia\":\r\n            case \"ForbidGoodwill\":\r\n            case \"ForbidMove\": {\r\n              break;\r\n            }\r\n            case \"GainGoodwill2\": {\r\n              if (ALL_LOCATIONS.includes(tval as LocationId)) break;\r\n              newBoard.characterStats[tval as CharacterId].goodwill += 2;\r\n              break;\r\n            }\r\n            case \"GainGoodwill\": {\r\n              if (ALL_LOCATIONS.includes(tval as LocationId)) break;\r\n              newBoard.characterStats[tval as CharacterId].goodwill += 1;\r\n              break;\r\n            }\r\n            default: {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      } \r\n    }\r\n\r\n    return newBoard;\r\n  }\r\n\r\n  async computeUtilityValue(\r\n    boardState: BoardState,\r\n    utilities: UtilityItem[],\r\n    values: ValueDefinition[]\r\n  ): Promise<number> {\r\n    // 构造 ruleMap: id -> UtilityItem\r\n    const ruleMap = new Map<string, UtilityItem>();\r\n    for (const u of utilities) {\r\n      ruleMap.set(u.id, u);\r\n    }\r\n    // 缓存计算结果: ruleId -> boolean\r\n    const cache = new Map<string, boolean>();\r\n\r\n    // 递归计算某条规则的布尔结果\r\n    const evalRule = (ruleId: string): boolean => {\r\n      if (cache.has(ruleId)) {\r\n        return cache.get(ruleId)!;\r\n      }\r\n      const rule = ruleMap.get(ruleId)!;\r\n      const evaluator = EVALUATORS[rule.type];\r\n      const result = evaluator(rule.params, boardState, evalRule);\r\n      cache.set(ruleId, result);\r\n      return result;\r\n    };\r\n\r\n    // 计算最终的效用值总和\r\n    let totalUtility = 0;\r\n    for (const vd of values) {\r\n      if (evalRule(vd.ruleId)) {\r\n        totalUtility += vd.value;\r\n      }\r\n    }\r\n    return totalUtility;\r\n  }\r\n}\r\n","// src/utils/placementKey.ts\r\n\r\n/**\r\n * 将一个 placementMap（ActionId → Target[]）转换为一个“规范化的”字符串键\r\n * 1. 先把所有 actionId→targets[] 中 targets 数组进行排序\r\n * 2. 然后把各个 [actionId, sortedTargets] 对按 actionId 升序排列\r\n * 3. 最后用 JSON.stringify 转为字符串\r\n *\r\n * 这样能够保证：即使原始 placementMap 的属性顺序不同、每个 targets 数组内部顺序不同，\r\n * 调用此函数后都会得到同样的字符串 key。\r\n */\r\nexport function canonicalizePlacementMap(\r\n  placementMap: Record<string, string[]>\r\n): string {\r\n  // 1) 收集所有非空 targets 数组，进行浅拷贝后排序\r\n  const entries: Array<[string, string[]]> = Object.entries(placementMap)\r\n    .filter(([, targets]) => Array.isArray(targets) && targets.length > 0)\r\n    .map(([actionId, targets]) => {\r\n      const sortedTargets = [...targets].sort(); // 排序 targets 内部\r\n      return [actionId, sortedTargets] as [string, string[]];\r\n    });\r\n\r\n  // 2) 对 actionId 升序排序\r\n  entries.sort((a, b) => a[0].localeCompare(b[0]));\r\n\r\n  // 3) 直接 JSON.stringify 数组形式\r\n  return JSON.stringify(entries);\r\n}\r\n","// src/fateweaver/workers/computeWorker.ts\r\n\r\nimport {\r\n  MastermindActionId,\r\n  ALL_MASTERMIND_ACTIONS,\r\n  ProtagonistActionId,\r\n  ALL_PROTAGONIST_ACTIONS,\r\n} from \"../constants/actions\";\r\nimport { LocationId, CharacterId, ALL_LOCATIONS } from \"../constants/board\";\r\nimport {\r\n  MastermindStatEntry,\r\n  ProtagonistStatEntry,\r\n} from \"../store/computeSlice\";\r\nimport { ComputeEngine, BoardState } from \"./computeEngine\";\r\nimport { UtilityItem, ValueDefinition } from \"../store/utilitySlice\";\r\n\r\n// 导入用于生成稳定 key 的函数\r\nimport { canonicalizePlacementMap } from \"../utils/placementKey\";\r\n\r\nexport type Target = LocationId | CharacterId;\r\n\r\ninterface LocalStats {\r\n  mastermindStats: Record<string, MastermindStatEntry>;\r\n  protagonistStats: Record<string, ProtagonistStatEntry>;\r\n  processedCount: number;\r\n}\r\n\r\ninterface StartMessage {\r\n  type: \"start\";\r\n  sliceDistributions: Array<Record<MastermindActionId, number>>;\r\n  protagonistConfig: Record<ProtagonistActionId, number>;\r\n  mastermindScope: Record<MastermindActionId, Target[]>;\r\n  protagonistScope: Record<ProtagonistActionId, Target[]>;\r\n  boardState: BoardState;\r\n  utilities: UtilityItem[];\r\n  values: ValueDefinition[];\r\n}\r\n\r\ninterface ProgressMessage {\r\n  type: \"progress\";\r\n  processed: number;\r\n}\r\n\r\ninterface DoneMessage {\r\n  type: \"done\";\r\n  localMastermindStats: Record<string, MastermindStatEntry>;\r\n  localProtagonistStats: Record<string, ProtagonistStatEntry>;\r\n}\r\n\r\nlet canceledFlag = false;\r\nlet localStats: LocalStats;\r\n\r\n/** 初始化空的 Mastermind 统计（按“组合 key”） */\r\nfunction makeEmptyMastermindStats(): Record<string, MastermindStatEntry> {\r\n  return {};\r\n}\r\n\r\n/** 初始化空的 Protagonist 统计（按“组合 key”） */\r\nfunction makeEmptyProtagonistStats(): Record<string, ProtagonistStatEntry> {\r\n  return {};\r\n}\r\n\r\n/** 从数组里选 k 个元素的所有组合 */\r\nfunction combinations<T>(arr: T[], k: number): T[][] {\r\n  if (k === 0) return [[]];\r\n  if (arr.length < k) return [];\r\n  const [first, ...rest] = arr;\r\n  const withFirst = combinations(rest, k - 1).map((c) => [first, ...c]);\r\n  const withoutFirst = combinations(rest, k);\r\n  return [...withFirst, ...withoutFirst];\r\n}\r\n\r\n/** 生成恰好 sum 张卡在 actions 各自上限内的所有分布 */\r\nfunction generateDistributions<T extends string>(\r\n  actions: T[],\r\n  config: Record<T, number>,\r\n  sum: number\r\n): Record<T, number>[] {\r\n  const results: Record<T, number>[] = [];\r\n  const current = {} as Record<T, number>;\r\n\r\n  function backtrack(idx: number, rem: number) {\r\n    if (idx === actions.length) {\r\n      if (rem === 0) results.push({ ...current });\r\n      return;\r\n    }\r\n    const action = actions[idx];\r\n    const maxCount = Math.min(config[action], rem);\r\n    for (let count = 0; count <= maxCount; count++) {\r\n      current[action] = count;\r\n      backtrack(idx + 1, rem - count);\r\n    }\r\n  }\r\n\r\n  backtrack(0, sum);\r\n  return results;\r\n}\r\n\r\n/**\r\n * 通用：更新一个 “StatEntry”（可能是 MastermindStatEntry 也可能是 ProtagonistStatEntry），\r\n * 保留最劣、次劣、第三劣三个不同 value，合并相同 value 的 count，并保存相应示例。\r\n *\r\n * entry: 目标 StatEntry（具有 worstValue, worstCount, worstExample 等字段）\r\n * value: 本次算出的效用值\r\n * examplePlacement: 导致该 value 的示例放置\r\n */\r\nfunction updateThreeWorst<E>(\r\n  entry: {\r\n    worstValue: number;\r\n    worstCount: number;\r\n    worstExample: E;\r\n    secondWorstValue: number;\r\n    secondWorstCount: number;\r\n    secondWorstExample: E;\r\n    thirdWorstValue: number;\r\n    thirdWorstCount: number;\r\n    thirdWorstExample: E;\r\n  },\r\n  value: number,\r\n  examplePlacement: E\r\n) {\r\n  type Candidate = {\r\n    value: number;\r\n    count: number;\r\n    example: E;\r\n  };\r\n  const candidates: Candidate[] = [];\r\n\r\n  // 先把 entry 中已有的、值不为 Infinity 的那几条“候选”都添加进来\r\n  if (entry.worstValue !== Infinity) {\r\n    candidates.push({\r\n      value: entry.worstValue,\r\n      count: entry.worstCount,\r\n      example: entry.worstExample,\r\n    });\r\n  }\r\n  if (entry.secondWorstValue !== Infinity) {\r\n    candidates.push({\r\n      value: entry.secondWorstValue,\r\n      count: entry.secondWorstCount,\r\n      example: entry.secondWorstExample,\r\n    });\r\n  }\r\n  if (entry.thirdWorstValue !== Infinity) {\r\n    candidates.push({\r\n      value: entry.thirdWorstValue,\r\n      count: entry.thirdWorstCount,\r\n      example: entry.thirdWorstExample,\r\n    });\r\n  }\r\n\r\n  // 然后把“本次”的 (value, 示例) 加进来\r\n  if (value !== undefined) {\r\n    candidates.push({ value, count: 1, example: examplePlacement });\r\n  }\r\n\r\n  // 按 value 聚合 count，并保留对应的示例\r\n  const mapVal = new Map<\r\n    number,\r\n    { count: number; example: E }\r\n  >();\r\n  for (const c of candidates) {\r\n    if (!mapVal.has(c.value)) {\r\n      mapVal.set(c.value, { count: c.count, example: c.example });\r\n    } else {\r\n      const prev = mapVal.get(c.value)!;\r\n      prev.count += c.count;\r\n    }\r\n  }\r\n\r\n  // 取最小的三条\r\n  const sorted = Array.from(mapVal.entries())\r\n    .map(([value, { count, example }]) => ({ value, count, example }))\r\n    .sort((a, b) => a.value - b.value)\r\n    .slice(0, 3);\r\n\r\n  // “写回” entry\r\n  if (sorted[0]) {\r\n    entry.worstValue = sorted[0].value;\r\n    entry.worstCount = sorted[0].count;\r\n    entry.worstExample = sorted[0].example;\r\n  } else {\r\n    entry.worstValue = Infinity;\r\n    entry.worstCount = 0;\r\n    // 保留原来的 worstExample\r\n  }\r\n\r\n  if (sorted[1]) {\r\n    entry.secondWorstValue = sorted[1].value;\r\n    entry.secondWorstCount = sorted[1].count;\r\n    entry.secondWorstExample = sorted[1].example;\r\n  } else {\r\n    entry.secondWorstValue = Infinity;\r\n    entry.secondWorstCount = 0;\r\n    // 保留原来的 secondWorstExample\r\n  }\r\n\r\n  if (sorted[2]) {\r\n    entry.thirdWorstValue = sorted[2].value;\r\n    entry.thirdWorstCount = sorted[2].count;\r\n    entry.thirdWorstExample = sorted[2].example;\r\n  } else {\r\n    entry.thirdWorstValue = Infinity;\r\n    entry.thirdWorstCount = 0;\r\n    // 保留原来的 thirdWorstExample\r\n  }\r\n}\r\n\r\n/**\r\n * 处理单个 Mastermind 三张牌分布 dist：\r\n *   - 递归枚举具体放置，并更新 localStats\r\n */\r\nasync function handleOneMasterDist(\r\n  dist: Record<MastermindActionId, number>,\r\n  protagonistConfig: Record<ProtagonistActionId, number>,\r\n  mastermindScope: Record<MastermindActionId, Target[]>,\r\n  protagonistScope: Record<ProtagonistActionId, Target[]>,\r\n  boardState: BoardState,\r\n  utilities: UtilityItem[],\r\n  values: ValueDefinition[],\r\n  engine: ComputeEngine\r\n) {\r\n  if (canceledFlag) return;\r\n\r\n  const actions = (Object.keys(dist) as MastermindActionId[]).filter(\r\n    (a) => dist[a] > 0\r\n  );\r\n  const used = new Set<Target>();\r\n  const placementMap = {} as Record<MastermindActionId, Target[]>;\r\n\r\n  const recurseMaster = async (idx: number) => {\r\n    if (canceledFlag) return;\r\n    if (idx === actions.length) {\r\n      // 所有 Mastermind 动作均已分配 targets\r\n\r\n      // 1) 收集所有被 Mastermind 放置到的 targets\r\n      const coveredTargets = new Set<Target>();\r\n      actions.forEach((a) => {\r\n        (placementMap[a] || []).forEach((t) => {\r\n          coveredTargets.add(t);\r\n        });\r\n      });\r\n\r\n      // 2) 构造临时的 Protagonist 作用域：过滤 ForbidIntrigue / ForbidMove\r\n      const tempProtoScope: Record<ProtagonistActionId, Target[]> = {\r\n        ...protagonistScope,\r\n      };\r\n      if (protagonistScope.ForbidIntrigue) {\r\n        const filteredIntrigue = protagonistScope.ForbidIntrigue.filter((t) => {\r\n          return coveredTargets.has(t);\r\n        });\r\n        tempProtoScope.ForbidIntrigue = filteredIntrigue;\r\n      }\r\n      if (protagonistScope.ForbidMove) {\r\n        const filteredMove = protagonistScope.ForbidMove.filter((t) =>\r\n          coveredTargets.has(t)\r\n        );\r\n        tempProtoScope.ForbidMove = filteredMove;\r\n      }\r\n\r\n      // 3) 生成当前 Mastermind 三张牌放置组合的“规范化 key”\r\n      const masterKey = canonicalizePlacementMap(placementMap);\r\n\r\n      // 4) 枚举所有可能的 Protagonist 三张牌分布\r\n      const protComps = generateDistributions(\r\n        ALL_PROTAGONIST_ACTIONS,\r\n        protagonistConfig,\r\n        3\r\n      );\r\n      for (const pDist of protComps) {\r\n        if (canceledFlag) return;\r\n\r\n        const pActions = (Object.keys(pDist) as ProtagonistActionId[]).filter(\r\n          (a) => pDist[a] > 0\r\n        );\r\n        const pUsed = new Set<Target>();\r\n        const pPlacementMap = {} as Record<ProtagonistActionId, Target[]>;\r\n\r\n        // eslint-disable-next-line no-loop-func\r\n        const recurseProto = async (jdx: number) => {\r\n          if (canceledFlag) return;\r\n          if (jdx === pActions.length) {\r\n            // 得到一个完整的 (placementMap, pPlacementMap) 实例\r\n            const utilValue = await engine.compute({\r\n              mastermindPlacement: placementMap,\r\n              protagonistPlacement: pPlacementMap,\r\n              boardState,\r\n              utilities,\r\n              values,\r\n            });\r\n\r\n            // 5) 生成当前 Protagonist 三张牌放置组合的“规范化 key”\r\n            const protagKey = canonicalizePlacementMap(pPlacementMap);\r\n\r\n            // 6) 在线更新 localStats.mastermindStats[masterKey]\r\n            if (!localStats.mastermindStats[masterKey]) {\r\n              // 构造空的 ProtagonistPlacement 示例对象\r\n              const emptyProtagExample = {} as Record<\r\n                ProtagonistActionId,\r\n                Target[]\r\n              >;\r\n              ALL_PROTAGONIST_ACTIONS.forEach((aid) => {\r\n                emptyProtagExample[aid] = [];\r\n              });\r\n              // 构造空的 MastermindPlacement 结构\r\n              const initialMasterPlacement = {} as Record<\r\n                MastermindActionId,\r\n                Target[]\r\n              >;\r\n              ALL_MASTERMIND_ACTIONS.forEach((aid) => {\r\n                initialMasterPlacement[aid] = [];\r\n              });\r\n\r\n              localStats.mastermindStats[masterKey] = {\r\n                placement: JSON.parse(\r\n                  JSON.stringify(placementMap)\r\n                ) as Record<MastermindActionId, Target[]>,\r\n                worstValue: Infinity,\r\n                worstCount: 0,\r\n                worstExample: { ...emptyProtagExample },\r\n                secondWorstValue: Infinity,\r\n                secondWorstCount: 0,\r\n                secondWorstExample: { ...emptyProtagExample },\r\n                thirdWorstValue: Infinity,\r\n                thirdWorstCount: 0,\r\n                thirdWorstExample: { ...emptyProtagExample },\r\n              };\r\n            }\r\n            const mEntry = localStats.mastermindStats[masterKey];\r\n            updateThreeWorst(\r\n              mEntry,\r\n              utilValue,\r\n              JSON.parse(\r\n                JSON.stringify(pPlacementMap)\r\n              ) as Record<ProtagonistActionId, Target[]>\r\n            );\r\n\r\n            // 7) 在线更新 localStats.protagonistStats[protagKey]\r\n            if (!localStats.protagonistStats[protagKey]) {\r\n              const emptyMasterExample = {} as Record<\r\n                MastermindActionId,\r\n                Target[]\r\n              >;\r\n              ALL_MASTERMIND_ACTIONS.forEach((aid) => {\r\n                emptyMasterExample[aid] = [];\r\n              });\r\n              // 构造空的 ProtagonistPlacement 结构\r\n              const initialProtagPlacement = {} as Record<\r\n                ProtagonistActionId,\r\n                Target[]\r\n              >;\r\n              ALL_PROTAGONIST_ACTIONS.forEach((aid) => {\r\n                initialProtagPlacement[aid] = [];\r\n              });\r\n\r\n              localStats.protagonistStats[protagKey] = {\r\n                placement: JSON.parse(\r\n                  JSON.stringify(pPlacementMap)\r\n                ) as Record<ProtagonistActionId, Target[]>,\r\n                worstValue: Infinity,\r\n                worstCount: 0,\r\n                worstExample: { ...emptyMasterExample },\r\n                secondWorstValue: Infinity,\r\n                secondWorstCount: 0,\r\n                secondWorstExample: { ...emptyMasterExample },\r\n                thirdWorstValue: Infinity,\r\n                thirdWorstCount: 0,\r\n                thirdWorstExample: { ...emptyMasterExample },\r\n              };\r\n            }\r\n            const pEntry = localStats.protagonistStats[protagKey];\r\n            updateThreeWorst(\r\n              pEntry,\r\n              utilValue,\r\n              JSON.parse(\r\n                JSON.stringify(placementMap)\r\n              ) as Record<MastermindActionId, Target[]>\r\n            );\r\n\r\n            // 8) 更新已处理计数，并在必要时发 progress\r\n            localStats.processedCount += 1;\r\n            if (localStats.processedCount % 5000 === 0) {\r\n              const msg: ProgressMessage = {\r\n                type: \"progress\",\r\n                processed: 5000,\r\n              };\r\n              globalThis.postMessage(msg);\r\n            }\r\n            return;\r\n          }\r\n\r\n          const pa = pActions[jdx];\r\n          const need = pDist[pa];\r\n          const avail = (tempProtoScope[pa] || []).filter((t) => !pUsed.has(t));\r\n          const combos = combinations(avail, need);\r\n          for (const combo of combos) {\r\n            if (canceledFlag) return;\r\n            combo.forEach((t) => pUsed.add(t));\r\n            pPlacementMap[pa] = combo;\r\n            await Promise.resolve();\r\n            await recurseProto(jdx + 1);\r\n            combo.forEach((t) => pUsed.delete(t));\r\n          }\r\n        };\r\n\r\n        await recurseProto(0);\r\n      }\r\n      return;\r\n    }\r\n\r\n    const a = actions[idx];\r\n    const need = dist[a];\r\n    const avail = (mastermindScope[a] || []).filter((t) => !used.has(t));\r\n    const combos = combinations(avail, need);\r\n    for (const combo of combos) {\r\n      if (canceledFlag) return;\r\n      combo.forEach((t) => used.add(t));\r\n      placementMap[a] = combo;\r\n      await Promise.resolve();\r\n      await recurseMaster(idx + 1);\r\n      combo.forEach((t) => used.delete(t));\r\n    }\r\n  };\r\n\r\n  await recurseMaster(0);\r\n}\r\n\r\nasync function runWorker(\r\n  sliceDistributions: Array<Record<MastermindActionId, number>>,\r\n  protagonistConfig: Record<ProtagonistActionId, number>,\r\n  mastermindScope: Record<MastermindActionId, Target[]>,\r\n  protagonistScope: Record<ProtagonistActionId, Target[]>,\r\n  boardState: BoardState,\r\n  utilities: UtilityItem[],\r\n  values: ValueDefinition[]\r\n) {\r\n  localStats = {\r\n    mastermindStats: makeEmptyMastermindStats(),\r\n    protagonistStats: makeEmptyProtagonistStats(),\r\n    processedCount: 0,\r\n  };\r\n\r\n  const engine = new ComputeEngine();\r\n\r\n  for (const dist of sliceDistributions) {\r\n    if (canceledFlag) break;\r\n\r\n    await handleOneMasterDist(\r\n      dist,\r\n      protagonistConfig,\r\n      mastermindScope,\r\n      protagonistScope,\r\n      boardState,\r\n      utilities,\r\n      values,\r\n      engine\r\n    );\r\n  }\r\n\r\n  const remainder = localStats.processedCount % 5000;\r\n  if (remainder > 0) {\r\n    const msg: ProgressMessage = {\r\n      type: \"progress\",\r\n      processed: remainder,\r\n    };\r\n    globalThis.postMessage(msg);\r\n  }\r\n\r\n  const doneMsg: DoneMessage = {\r\n    type: \"done\",\r\n    localMastermindStats: localStats.mastermindStats,\r\n    localProtagonistStats: localStats.protagonistStats,\r\n  };\r\n  globalThis.postMessage(doneMsg);\r\n  globalThis.close();\r\n}\r\n\r\nglobalThis.addEventListener(\"message\", (ev: MessageEvent) => {\r\n  const data = ev.data as StartMessage | { type: \"cancel\" };\r\n  if (data.type === \"start\") {\r\n    canceledFlag = false;\r\n    runWorker(\r\n      data.sliceDistributions,\r\n      data.protagonistConfig,\r\n      data.mastermindScope,\r\n      data.protagonistScope,\r\n      data.boardState,\r\n      data.utilities,\r\n      data.values\r\n    );\r\n  } else if (data.type === \"cancel\") {\r\n    canceledFlag = true;\r\n  }\r\n});\r\n"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","toPropertyKey","t","i","r","e","toPrimitive","call","TypeError","String","Number","_defineProperty","Object","defineProperty","value","enumerable","configurable","writable","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","ALL_MASTERMIND_ACTIONS","GainIntrigue2","GainIntrigue","UselessLocationCover","DiagonalMove","VerticalMove","HorizontalMove","GainParanoia","LoseParanoia","ForbidParanoia","ForbidGoodwill","ALL_PROTAGONIST_ACTIONS","ForbidMove","GainGoodwill2","ForbidIntrigue","GainGoodwill","ALL_LOCATIONS","Hospital","Shrine","City","School","BoyStudent","GirlStudent","RichMansDaughter","ClassRep","MysteryBoy","ShrineMaiden","Alien","GodlyBeing","PoliceOfficer","OfficeWorker","Informer","PopIdol","Journalist","Boss","Doctor","Patient","Nurse","Henchman","IdentificationOfficer","ArmyMan","UnlockedPatient","findCharacterLocation","charId","boardState","loc","locations","characters","includes","EVALUATORS","paranoiaGreaterThan","params","threshold","characterStats","paranoia","evalParanoiaGreaterThan","intrigueGreaterThan","target","intrigue","evalIntrigueGreaterThan","goodwillGreaterThan","goodwill","evalGoodwillGreaterThan","someoneInSomewhere","location","evalSomeoneInSomewhere","someoneInSameLocationAs","charA","charB","locA","evalSomeoneInSameLocationAs","numberShareLocationGreaterThan","id","alive","evalNumberShareLocationGreaterThan","numberShareLocationEquals","targetNumber","evalNumberShareLocationEquals","and","evalRule","sub1","sub2","or","not","FORBIDDEN_AREAS","ComputeEngine","compute","args","newBoard","this","computeNewBoardState","mastermindPlacement","protagonistPlacement","computeUtilityValue","utilities","values","cid","stats","targetMap","actionId","arr","key","isMaster","findLocation","attemptMove","dest","board","src","c","targetKey","actions","cur","Math","max","a1","a2","actSet","Set","has","info","tval","ruleMap","Map","u","set","cache","ruleId","get","rule","result","evaluator","type","totalUtility","vd","canonicalizePlacementMap","placementMap","entries","_ref","targets","Array","isArray","map","_ref2","sort","a","b","localeCompare","JSON","stringify","localStats","canceledFlag","combinations","k","first","rest","updateThreeWorst","entry","examplePlacement","candidates","worstValue","Infinity","count","worstCount","example","worstExample","secondWorstValue","secondWorstCount","secondWorstExample","thirdWorstValue","thirdWorstCount","thirdWorstExample","undefined","mapVal","sorted","from","slice","async","handleOneMasterDist","dist","protagonistConfig","mastermindScope","protagonistScope","engine","used","recurseMaster","idx","coveredTargets","add","tempProtoScope","_objectSpread","filteredIntrigue","filteredMove","masterKey","protComps","config","sum","results","current","backtrack","rem","action","maxCount","min","generateDistributions","pDist","pActions","pUsed","pPlacementMap","recurseProto","jdx","utilValue","protagKey","mastermindStats","emptyProtagExample","aid","initialMasterPlacement","placement","parse","protagonistStats","emptyMasterExample","initialProtagPlacement","processedCount","msg","processed","globalThis","postMessage","pa","need","combos","combo","Promise","resolve","delete","addEventListener","ev","data","sliceDistributions","remainder","doneMsg","localMastermindStats","localProtagonistStats","close","runWorker"],"sourceRoot":""}